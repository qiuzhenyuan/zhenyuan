<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Zhenyuan&#39;s Blog</title>
    <link>https://zhenyuan.vercel.app/</link>
    <description>Recent content on Zhenyuan&#39;s Blog</description>
    <image>
      <url>https://zhenyuan.vercel.app/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://zhenyuan.vercel.app/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 16 Jul 2022 08:48:05 +0800</lastBuildDate><atom:link href="https://zhenyuan.vercel.app/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何提高代码可读性</title>
      <link>https://zhenyuan.vercel.app/post/%E7%BC%96%E5%86%99%E5%8F%AF%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF/</link>
      <pubDate>Sat, 16 Jul 2022 08:48:05 +0800</pubDate>
      
      <guid>https://zhenyuan.vercel.app/post/%E7%BC%96%E5%86%99%E5%8F%AF%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF/</guid>
      <description>在写代码时考虑别人是否能快速理解，是一件很值得称赞的事情。事实上，把代码的可读性提高不仅仅是方便别人，也是方便自己。那些漫不经心写下的烂代码，也许半个月后自己也看不懂了:) 在99%的场景下，追求代码可读性比追求代码的极致性能更重要。
 代码质量的标准：在《Clean Code》一书中Bob认为在代码阅读过程中人们说脏话的频率是衡量代码质量的唯一标准。 可读性基本定理：代码的写法应该让别人理解它所需的时间最小化。
 命名的改进  更多信息：让函数名和变量名承载更多的信息，避免使用泛泛的名字，比如 i, j, k, tmp, retVal 等 具体优于抽象：用具体的名字比抽象的名字好。比如 CanListenOnPort 就比 CanStartServer 更加具体。 名字长度与作用域：作用域越大的变量，名字应该越长。为作用域大的名字采用更长的名字——不要用让人费解的一个或两个字母的名字来命名在几屏之间都可见的变量。 细节：如果有，请给变量名带上重要细节, 例如单位 ms。 歧义：避免使用有歧义的命名，如filter。filter返回的，是过滤前还是过滤后的呢？  怎么写好注释  什么地方要写注释：站在代码读者的角度思考，让人说“啊？”的地方就应该加上注释 什么地方不需要注释：能从代码迅速推断出事实的地方 常量要有故事：说明为啥要用这个常量  简化循环和逻辑  if/else 语句块：一般来说优先处理正逻辑。比如用 if(debug) 不用 if(!debug) 减少循环嵌套：嵌套的代码块需要更加集中精力去理解。每层新的嵌套都需要读者把更多的上下文“压入栈”。应该把它们改写成更加“线性”的代码来避免深嵌套。 提前返回：通常来讲提早返回可以减少嵌套并让代码整洁。“保护语句”（在函数顶部处理简单的情况时）尤其有用。 别用 goto  优化变量的可读性  1.变量越多，就越难全部跟踪它们的动向。
2.变量的作用域越大，就需要跟踪它的动向越久。
3.变量改变得越频繁，就越难以跟踪它的当前值。
  减少变量：只用一次的变量，也许可以直接干到。例如now:= time.Now() 如果只用一次，就没必要定义这个变量。因为程序员看到它定义出来会以为它会被多次用到，但它实际又没有 缩小变量作用域：让你的变量对尽量少的代码行可见。有时可以把定义向下移。因为读者在读到后面之前不需要知道所有变量，所以可以简单地把每个定义移到对它的使用之前 只写一次的变量更好：操作一个变量的地方越多，越难确定它的当前值。  更高层次的组织  思考更高层次的目标：看看某个函数或代码块，问问你自己：  这段代码高层次的目标是什么？ 对于每一行代码，问一下：它是直接为了目标而工作吗？这段代码高层次的目标是什么呢？   抽函数：如果足够的行数在解决不相关的子问题，抽取代码到独立的函数中。 分段，一次只做一件事：把代码组织得一次只做一件事情。但是就算你不这样做，你仍然可以在函数内部组织代码，使得它感觉像是有分开的逻辑段。  参考 《编写可读代码的艺术》</description>
    </item>
    
  </channel>
</rss>
